version: 2.1

orbs:
  browser-tools: circleci/browser-tools@2.0.0
  ruby: circleci/ruby@2.5.3

references:
  ignore_deployable_branches: &ignore_deployable_branches
    filters: { branches: { ignore: [main, staging] } }

  test_container_config: &test_container_config
    working_directory: ~/app
    resource_class: large
    docker:
      - image: cimg/ruby:3.4.3-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 4
      - image: cimg/postgres:14.4
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management_test
      - image: cimg/redis:7.0

commands:
  compile_frontend:
    description: Compile frontend modules
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          key: &yarn-cache yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install frontend modules
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: *yarn-cache
          paths:
            - .yarn/cache
            - .yarn/unplugged

  install_firefox:
    description: Install Firefox and Geckodriver
    steps:
      - browser-tools/install_firefox
      - browser-tools/install_geckodriver
      - run:
          name: Check install
          command: |
            firefox --version

jobs:
  install_dependencies:
    <<: *test_container_config
    steps:
      - checkout
      - ruby/install-deps
      - compile_frontend
      - install_firefox
      - persist_to_workspace:
          root: ~/
          paths:
            - app/vendor/bundle
            - app/node_modules
            - .local/bin
            - .bundle/config

  run_tests:
    <<: *test_container_config
    circleci_ip_ranges: true # opts the job into the IP ranges feature
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - ruby/install-deps
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            export SPEC_STATUS_PATH=~/spec_status
            bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress -- spec/services || \
              (echo "Flaky tests detected, trying again..." && sleep 30 && bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress --only-failures -- spec)
          environment:
            MOZ_HEADLESS: 1
            RAILS_ENV: test
            RACK_ENV: test
            DISABLE_COVERAGE: 1

workflows:
  test_full_suite:
    jobs:
      - install_dependencies:
          <<: *ignore_deployable_branches
      - run_tests:
          requires: [install_dependencies]
