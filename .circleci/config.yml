references:
  defaults: &defaults
    working_directory: ~/repo

  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: offender-management

  deploy_container_config: &deploy_container_config
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  test_container_config: &test_container_config
    resource_class: large
    docker:
      - image: cimg/ruby:3.2.2-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 4
          COMPLEXITY_API_HOST: https://complexity-of-need-staging.hmpps.service.justice.gov.uk
          COMMUNITY_API_HOST: https://community-api-secure.test.delius.probation.hmpps.dsd.io
          ASSESSMENT_API_HOST: https://offender-dev.aks-dev-1.studio-hosting.service.justice.gov.uk
          ASSESS_RISKS_AND_NEEDS_API_HOST: https://assess-risks-and-needs-dev.hmpps.service.justice.gov.uk
      - image: cimg/postgres:14.4
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management-allocation-manager_test
      - image: cimg/redis:7.0

  configure_k8s: &configure_k8s
    run:
      name: Setup Kubectl
      command: |
        echo -n "${K8S_CLUSTER_CERT}" | base64 -d > ./live_ca.crt
        kubectl config set-cluster "${K8S_CLUSTER_NAME}" --certificate-authority=./live_ca.crt --server="https://${K8S_CLUSTER_NAME}"
        kubectl config set-credentials circleci --token="${K8S_TOKEN}"
        kubectl config set-context "${K8S_CLUSTER_NAME}" --cluster="${K8S_CLUSTER_NAME}" --user=circleci --namespace="${K8S_NAMESPACE}"
        kubectl config use-context "${K8S_CLUSTER_NAME}"
        kubectl config current-context
        kubectl -n "${K8S_NAMESPACE}" get pods

  build_docker_image: &build_docker_image
    run:
      name: Build allocation-manager docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  build_quick_docker_image: &build_quick_docker_image
    run:
      name: Build allocation-manager docker image - quick mode
      command: |
        set -euo pipefail
        env_name="${K8S_NAMESPACE#offender-management-}"
        . ~/env/"${env_name}"-ecr-secrets.sh

        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV

        ecr_host="$(echo "${ECR_ENDPOINT}" | cut -f1 -d/)"
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin "${ecr_host}"
        
        docker pull "${ECR_ENDPOINT}:latest"
        docker tag "${ECR_ENDPOINT}:latest" offender-management-allocation-manager:latest

        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -f Dockerfile.quick \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push allocation-manager docker image
      command: |
        set -euo pipefail
        env_name="${K8S_NAMESPACE#offender-management-}"
        . ~/env/"${env_name}"-ecr-secrets.sh

        set -x # doing -x earlier displays sensitive credentials
        ecr_host="$(echo "${ECR_ENDPOINT}" | cut -f1 -d/)"
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin "${ecr_host}"
        docker tag app "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}:latest"
          docker push "${ECR_ENDPOINT}:latest"
        fi
      environment:
        <<: *github_team_name_slug
        REPONAME: offender-management-allocation-manager

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  aws-cli: circleci/aws-cli@2.0.3

commands:
  install_firefox:
    description: Install Firefox and Geckodriver
    steps:
      - run:
          name: Ensure local bin directory exists
          command: mkdir -p ~/.local/bin
      - browser-tools/install-firefox:
          install-dir: /home/circleci/.local/bin
      - run:
          name: Firefox post-install tasks
          command: |
            # If a new Firefox binary was installed
            if [ -e /usr/local/bin/firefox ]; then
              # Move Firefox symlink to the local bin (so it gets persisted to cache)
              sudo mv /usr/local/bin/firefox ~/.local/bin/firefox
              # Change ownership of Firefox (since this is the circleci user's bin directory)
              sudo chown -hR circleci:circleci ~/.local/bin/firefox*
            fi

            # Remove old Firefox installations (all but the most recent)
            ls -trd ~/.local/bin/firefox-* | head -n -1 | xargs --no-run-if-empty rm -r
      - browser-tools/install-geckodriver:
          install-dir: /home/circleci/.local/bin

jobs:
  noop:
    <<: *defaults
    <<: *deploy_container_config
    steps:
      - run:
          name: Truthy no-op
          command: "true"

  install_dependencies:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: allocation-manager-{{ checksum "Gemfile.lock" }}-2022-10-05T13:43:00 # Set current time in iso8601 to bust cache
      - run:
          name: Which bundler?
          # Install the version of bundler used in Gemfile.lock
          command: gem install -v $(ruby -e 'puts /BUNDLED WITH\s+(\d+\.\d+\.\d+)/m.match(File.read("Gemfile.lock"))[1]') bundler && bundle -v
      - run:
          name: Install frontend modules
          command: yarn install
      - run:
          name: Install ruby gems
          command: |
            bundle config set path 'vendor/bundle'
            bundle check || {
              # Install CMake - required to install undercover gem
              sudo apt update && sudo apt install cmake
              # Install missing gems
              bundle install
            }
      - install_firefox
      - run:
          name: Download Code Climate
          command: |
            if [ `which cc-test-reporter` ]
            then
              echo "CC test reporter cached"
            else
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/.local/bin/cc-test-reporter
              chmod +x ~/.local/bin/cc-test-reporter
            fi
      - save_cache:
          key: allocation-manager-{{ checksum "Gemfile.lock" }}-2022-10-05T13:43:00 # Set current time in iso8601 to bust cache
          paths:
            - ~/repo/vendor/bundle
            - ~/repo/node_modules
            - ~/.local/bin
      - persist_to_workspace:
          root: ~/
          paths:
            - repo/vendor/bundle
            - repo/node_modules
            - .local/bin
            - .bundle/config

  fetch_secrets:
    <<: *defaults
    <<: *deploy_container_config
    steps:
      - attach_workspace:
          at: ~/
      - *configure_k8s
      - run:
          name: Fetch creds from K8s and store in workspace
          command: |
            set -euo pipefail

            env_name="${K8S_NAMESPACE#offender-management-}"
            
            rm -rf ~/env/
            mkdir ~/env

            apk add jq

            kubectl -n "${K8S_NAMESPACE}" get secrets ecr-repo-allocation-manager -o json > /tmp/ecr-secrets.json
            > ~/env/"${env_name}"-ecr-secrets.sh
            echo "export AWS_ACCESS_KEY_ID='$(jq -r .data.access_key_id /tmp/ecr-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-ecr-secrets.sh
            echo "export AWS_SECRET_ACCESS_KEY='$(jq -r .data.secret_access_key /tmp/ecr-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-ecr-secrets.sh
            echo "export ECR_ENDPOINT='$(jq -r .data.repo_url /tmp/ecr-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-ecr-secrets.sh
            rm /tmp/ecr-secrets.json
            
            kubectl -n "${K8S_NAMESPACE}" get secrets hmpps-auth-secrets -o json > /tmp/hmpps-secrets.json
            > ~/env/"${env_name}"-hmpps-secrets.sh
            echo "export HMPPS_API_CLIENT_ID='$(jq -r .data.HMPPS_API_CLIENT_ID /tmp/hmpps-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-hmpps-secrets.sh
            echo "export HMPPS_API_CLIENT_SECRET='$(jq -r .data.HMPPS_API_CLIENT_SECRET /tmp/hmpps-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-hmpps-secrets.sh
            rm /tmp/hmpps-secrets.json
      - persist_to_workspace:
          root: ~/
          paths:
            - env

  rubocop:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Rubocop
          command: bundle exec rubocop
  test:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            env_name="${K8S_NAMESPACE#offender-management-}"
            . ~/env/"${env_name}"-hmpps-secrets.sh
            export SPEC_STATUS_PATH=~/spec_status
            bundle exec parallel_test -t rspec -- -t ~flaky --format progress -- spec || \
              (echo "Flaky tests detected, trying again..." && sleep 30 && bundle exec parallel_test -t rspec -- -t ~flaky --format progress --only-failures -- spec)
          environment:
            MOZ_HEADLESS: 1
            ALLOCATION_MANAGER_HOST: https://dev.moic.service.justice.gov.uk
            RAILS_ENV: test
            RACK_ENV: test
            DISABLE_COVERAGE: 1
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

  build_and_push_docker_image:
    <<: *defaults
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-cli/install
      - *configure_k8s
      - *build_docker_image
      - *push_docker_image

  build_and_push_quick_docker_image:
    <<: *defaults
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-cli/install
      - *configure_k8s
      - *build_quick_docker_image
      - *push_docker_image

  verify_docker_image_builds:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-cli/install
      - *build_docker_image

  deploy:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - *configure_k8s
      - deploy:
          name: Deploy
          command: |
            set -x
            shopt -s nullglob
            env_name="${K8S_NAMESPACE#offender-management-}"
            sed -i -e "s/:latest/:${CIRCLE_SHA1}/" deploy/"${env_name}"/deployment.yaml deploy/"${env_name}"/cron-*.yaml
            kubectl -n "${K8S_NAMESPACE}" annotate deployments/allocation-manager kubernetes.io/change-cause="${CIRCLE_BUILD_URL}"
            kubectl apply --record=false -f ./deploy/"${env_name}"

workflows:
  feature_branch:
    jobs:
      - install_dependencies:
          filters: { branches: { ignore: [main, preprod, test, test2] } }
      - fetch_secrets:
          filters: { branches: { ignore: [main, preprod, test, test2] } }
          context: [offender-management-shared, offender-management-staging]

      - rubocop:
          requires: [install_dependencies]
          filters: { branches: { ignore: [main, preprod, test, test2] } }
      - test:
          requires: [install_dependencies, fetch_secrets]
          filters: { branches: { ignore: [main, preprod, test, test2] } }
          context: [offender-management-shared, offender-management-staging]
      - verify_docker_image_builds:
          filters: { branches: { ignore: [main, preprod, test, test2] } }

  test_env:
    jobs:
      - fetch_secrets:
          filters: { branches: { only: [test] } }
          context: [offender-management-shared, offender-management-test]
      - build_and_push_docker_image:
          requires: [fetch_secrets]
          filters: { branches: { only: [test] } }
          context: [offender-management-shared, offender-management-test]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [test] } }
          context: [offender-management-shared, offender-management-test]

  test2_env:
    jobs:
      - fetch_secrets:
          filters: { branches: { only: [test2] } }
          context: [offender-management-shared, offender-management-test2]
      - build_and_push_docker_image:
          requires: [fetch_secrets]
          filters: { branches: { only: [test2] } }
          context: [offender-management-shared, offender-management-test2]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [test2] } }
          context: [offender-management-shared, offender-management-test2]

  preprod:
    jobs:
      - fetch_secrets:
          filters: { branches: { only: [preprod] } }
          context: [offender-management-shared, offender-management-preprod]
      - build_and_push_docker_image:
          requires: [fetch_secrets]
          filters: { branches: { only: [preprod] } }
          context: [offender-management-shared, offender-management-preprod]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [preprod] } }
          context: [offender-management-shared, offender-management-preprod]
          
  staging:
    jobs:
      - install_dependencies:
          filters: { branches: { only: [staging] } }
      - fetch_secrets:
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]

      - build_and_push_docker_image:
          requires: [install_dependencies, fetch_secrets]
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]
      - rubocop:
          requires: [install_dependencies]
          filters: { branches: { only: [staging] } }
      - test:
          requires: [install_dependencies, fetch_secrets]
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]

      - deploy:
          requires: [build_and_push_docker_image, rubocop, test]
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]

  staging_and_production:
    jobs:
      - install_dependencies:
          filters: { branches: { only: [main] } }
      - fetch_secrets:
          name: 'fetch_staging_secrets'
          filters: { branches: { only: [main] } }
          context: [offender-management-shared, offender-management-staging]

      - build_and_push_docker_image:
          requires: [install_dependencies, fetch_staging_secrets]
          filters: { branches: { only: [main] } }
          context: [offender-management-shared, offender-management-staging]
      - rubocop:
          requires: [install_dependencies]
          filters: { branches: { only: [main] } }
      - test:
          requires: [install_dependencies, fetch_staging_secrets]
          filters: { branches: { only: [main] } }
          context: [offender-management-shared, offender-management-staging]

      - deploy:
          name: deploy_staging
          requires: [build_and_push_docker_image, rubocop, test]
          filters: { branches: { only: [main] } }
          context: [offender-management-shared, offender-management-staging]

      - deploy:
          name: deploy_production
          requires: [deploy_staging]
          filters: { branches: { only: [main] } }
          context: [offender-management-shared, offender-management-production]
