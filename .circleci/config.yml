references:
  defaults: &defaults
    working_directory: ~/repo

  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: offender-management

  deploy_container_config: &deploy_container_config
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  test_container_config: &test_container_config
    resource_class: medium
    docker:
      - image: cimg/ruby:2.7.5-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 6
          COMPLEXITY_API_HOST: https://complexity-of-need-staging.hmpps.service.justice.gov.uk
          COMMUNITY_API_HOST: https://community-api-secure.test.delius.probation.hmpps.dsd.io
          ASSESSMENT_API_HOST: https://offender-dev.aks-dev-1.studio-hosting.service.justice.gov.uk
      - image: circleci/postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management-allocation-manager_test
      - image: redis

  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        echo "${GPG_PRIVATE_KEY}" | base64 -d | gpg --batch --allow-secret-key-import --import

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        gpg --export-ownertrust > /tmp/ownertrust.txt
        echo $GPG_KEY_ID:1 >> /tmp/ownertrust.txt
        gpg --import-ownertrust /tmp/ownertrust.txt
        gpgconf --kill gpg-agent
        gpg-agent --daemon --allow-preset-passphrase
        /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
        git-crypt unlock

  build_docker_image: &build_docker_image
    run:
      name: Build allocation-manager docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push allocation-manager docker image
      command: |
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin "$ECR_ENDPOINT"
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
        fi
      environment:
        <<: *github_team_name_slug
        REPONAME: offender-management-allocation-manager

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.3
  aws-cli: circleci/aws-cli@2.0.3

commands:
  install_firefox:
    description: Install Firefox and Geckodriver
    steps:
      - run:
          name: Ensure local bin directory exists
          command: mkdir -p ~/.local/bin
      - browser-tools/install-firefox:
          install-dir: /home/circleci/.local/bin
      - run:
          name: Firefox post-install tasks
          command: |
            # If a new Firefox binary was installed
            if [ -e /usr/local/bin/firefox ]; then
              # Move Firefox symlink to the local bin (so it gets persisted to cache)
              sudo mv /usr/local/bin/firefox ~/.local/bin/firefox
              # Change ownership of Firefox (since this is the circleci user's bin directory)
              sudo chown -hR circleci:circleci ~/.local/bin/firefox*
            fi

            # Remove old Firefox installations (all but the most recent)
            ls -trd ~/.local/bin/firefox-* | head -n -1 | xargs --no-run-if-empty rm -r
      - browser-tools/install-geckodriver:
          install-dir: /home/circleci/.local/bin

jobs:
  install_dependencies:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: allocation-manager-{{ checksum "Gemfile.lock" }}-v4 # increment v number to bust cache
      - run:
          name: Which bundler?
          command: bundle -v
      - run:
          name: Install frontend modules
          command: yarn install
      - run:
          name: Install ruby gems
          command: |
            bundle config set path 'vendor/bundle'
            bundle check || {
              # Install CMake - required to install undercover gem
              sudo apt update && sudo apt install cmake
              # Install missing gems
              bundle install
            }
      - install_firefox
      - run:
          name: Download Code Climate
          command: |
            if [ `which cc-test-reporter` ]
            then
              echo "CC test reporter cached"
            else
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/.local/bin/cc-test-reporter
              chmod +x ~/.local/bin/cc-test-reporter
            fi
      - save_cache:
          key: allocation-manager-{{ checksum "Gemfile.lock" }}-v4 # increment v number to bust cache
          paths:
            - ~/repo/vendor/bundle
            - ~/repo/node_modules
            - ~/.local/bin
      - persist_to_workspace:
          root: ~/
          paths:
            - repo/vendor/bundle
            - repo/node_modules
            - .local/bin
            - .bundle/config
  rubocop:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Rubocop
          command: bundle exec rubocop
  test:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            cc-test-reporter before-build
            bundle exec rake parallel:spec
          environment:
            ALLOCATION_MANAGER_HOST: https://dev.moic.service.justice.gov.uk
            RAILS_ENV: test
            RACK_ENV: test
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

  build_and_push_docker_image:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - aws-cli/install
      - *build_docker_image
      - *push_docker_image

  deploy_staging:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Kubectl deployment staging setup
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${TOKEN_LIVE_STAGING}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=${KUBE_ENV_STAGING_NAMESPACE}
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=${KUBE_ENV_STAGING_NAMESPACE} get pods
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to live staging
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/staging
          environment:
            <<: *github_team_name_slug

  test_staging:
    <<: *test_container_config
    working_directory: ~/integration-tests
    steps:
      - run:
          name: Clone integration tests repo
          command: git clone https://github.com/ministryofjustice/offender-management-integration-tests.git .
      - restore_cache:
          key: integration-tests-{{ checksum "Gemfile.lock" }}-v4 # increment v number to bust cache
      - run:
          name: Install ruby gems
          command: |
            bundle config set path 'vendor/bundle'
            bundle check || bundle install
      - install_firefox
      - save_cache:
          key: integration-tests-{{ checksum "Gemfile.lock" }}-v4 # increment v number to bust cache
          paths:
            - ~/integration-tests/vendor/bundle
            - ~/.local/bin
      - run:
          name: Run integration tests
          command: bundle exec rspec spec/integration --no-color --format documentation --format RspecJunitFormatter -o screenshots/rspec.xml
          environment:
            STAGING_START_PAGE: https://dev.moic.service.justice.gov.uk
      - store_test_results:
          path: screenshots
      - store_artifacts:
          path: screenshots

  deploy_preprod:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Kubectl deployment preproduction setup
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${TOKEN_LIVE_PREPROD}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=${KUBE_ENV_PREPROD_NAMESPACE}
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=${KUBE_ENV_PREPROD_NAMESPACE} get pods
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to live cluster pre-production
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/preprod/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/preprod/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/preprod
          environment:
            <<: *github_team_name_slug

  deploy_production:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Kubectl deployment production setup
          command: |
            echo -n ${CLUSTER_CERT_LIVE} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./live_ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${TOKEN_LIVE_PRODUCTION}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE}
            kubectl config use-context ${CLUSTER_NAME_LIVE}
            kubectl config current-context
            kubectl --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} get pods
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to production
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/production
          environment:
            <<: *github_team_name_slug

workflows:
  build_and_test:
    jobs:
      - install_dependencies
      - rubocop:
          requires:
            - install_dependencies
      - test:
          requires:
            - install_dependencies
      - build_and_push_docker_image:
          requires:
            - install_dependencies
          filters:
            branches:
              only:
                - main
                - preproduction
      - deploy_staging:
          requires:
            - rubocop
            - test
            - build_and_push_docker_image
          filters:
            branches:
              only:
                - main
      - test_staging:
          requires:
            - deploy_staging
          filters:
            branches:
              only: main
      - deploy_production_approval:
          type: approval
          requires:
            - test_staging
          filters:
            branches:
              only: main
      - deploy_production:
          requires:
            - deploy_production_approval
          filters:
            branches:
              only: main
      - deploy_preprod:
          requires:
            - rubocop
            - test
            - build_and_push_docker_image
          filters:
            branches:
              only: preproduction
