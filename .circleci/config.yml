references:
  ignore_deployable_branches: &ignore_deployable_branches
    filters: { branches: { ignore: [main, staging, preprod, test, test2] } }

  docker_image_name: &docker_image_name
    image_name: quay.io/hmpps/offender-management

  build_and_push_docker_image_config: &build_and_push_docker_image_config
    name: build_and_push_docker_image
    persist_container_image: true
    <<: *docker_image_name

  verify_docker_image_config: &verify_docker_image_config
    name: verify_docker_image
    publish: false
    <<: *docker_image_name

  deploy_container_config: &deploy_container_config
    working_directory: ~/app
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  test_container_config: &test_container_config
    working_directory: ~/app
    resource_class: large
    docker:
      - image: cimg/ruby:3.3.4-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 4
          COMPLEXITY_API_HOST: https://complexity-of-need-staging.hmpps.service.justice.gov.uk
          COMMUNITY_API_HOST: https://community-api-secure.test.delius.probation.hmpps.dsd.io
          ASSESS_RISKS_AND_NEEDS_API_HOST: https://assess-risks-and-needs-dev.hmpps.service.justice.gov.uk
          TIERING_API_HOST: https://hmpps-tier-dev.hmpps.service.justice.gov.uk
      - image: cimg/postgres:14.4
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management_test
      - image: cimg/redis:7.0

  configure_k8s: &configure_k8s
    run:
      name: Setup Kubectl
      command: |
        echo -n "${K8S_CLUSTER_CERT}" | base64 -d > ./live_ca.crt
        kubectl config set-cluster "${K8S_CLUSTER_NAME}" --certificate-authority=./live_ca.crt --server="https://${K8S_CLUSTER_NAME}"
        kubectl config set-credentials circleci --token="${K8S_TOKEN}"
        kubectl config set-context "${K8S_CLUSTER_NAME}" --cluster="${K8S_CLUSTER_NAME}" --user=circleci --namespace="${K8S_NAMESPACE}"
        kubectl config use-context "${K8S_CLUSTER_NAME}"
        kubectl config current-context
        kubectl -n "${K8S_NAMESPACE}" get pods

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.4
  ruby: circleci/ruby@2.1.3
  hmpps: ministryofjustice/hmpps@9.1.0

commands:
  install_firefox:
    description: Install Firefox and Geckodriver
    steps:
      - browser-tools/install-firefox
      - browser-tools/install-geckodriver
      - run:
          name: Check install
          command: |
            firefox --version

jobs:
  noop:
    <<: *deploy_container_config
    steps:
      - run:
          name: Truthy no-op
          command: "true"

  install_dependencies:
    <<: *test_container_config
    steps:
      - checkout
      - ruby/install-deps
      - restore_cache:
          name: Restore Yarn Package Cache
          key: &yarn-cache yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install frontend modules
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: *yarn-cache
          paths:
            - .yarn/cache
            - .yarn/unplugged
      - install_firefox
      - run:
          name: Download Code Climate
          command: |
            if [ `which cc-test-reporter` ]
            then
              echo "CC test reporter cached"
            else
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/.local/bin/cc-test-reporter
              chmod +x ~/.local/bin/cc-test-reporter
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - app/vendor/bundle
            - app/node_modules
            - .local/bin
            - .bundle/config

  fetch_env_vars:
    <<: *deploy_container_config
    steps:
      - *configure_k8s
      - run:
          name: Fetch creds from K8s and store in workspace
          command: |
            set -euo pipefail

            env_name="${K8S_NAMESPACE#offender-management-}"

            mkdir -p ~/env

            apk add jq

            kubectl -n "${K8S_NAMESPACE}" get secrets hmpps-auth-secrets -o json > /tmp/hmpps-secrets.json
            > ~/env/"${env_name}"-hmpps-secrets.sh
            echo "export HMPPS_API_CLIENT_ID='$(jq -r .data.HMPPS_API_CLIENT_ID /tmp/hmpps-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-hmpps-secrets.sh
            echo "export HMPPS_API_CLIENT_SECRET='$(jq -r .data.HMPPS_API_CLIENT_SECRET /tmp/hmpps-secrets.json | base64 -d)'" >> ~/env/"${env_name}"-hmpps-secrets.sh
            rm /tmp/hmpps-secrets.json

            # Takes all vars ending with '_HOST' in the 'shared-environment' configmap and puts them in a file with the format: export VAR='value'
            kubectl -n "${K8S_NAMESPACE}" get configmap/shared-environment -o json | jq -Mr '.data | to_entries[] | select(.key|endswith("_HOST")) | "export \(.key)='\''\(.value)'\''"' > ~/env/"${env_name}-shared-env.sh"
      - persist_to_workspace:
          root: ~/
          paths:
            - env

  rubocop:
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - ruby/install-deps
      - ruby/rubocop-check

  test:
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - ruby/install-deps
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            env_name="${K8S_NAMESPACE#offender-management-}"
            . ~/env/"${env_name}-shared-env.sh"
            . ~/env/"${env_name}"-hmpps-secrets.sh
            export SPEC_STATUS_PATH=~/spec_status
            bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress -- spec || \
              (echo "Flaky tests detected, trying again..." && sleep 30 && bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress --only-failures -- spec)
          environment:
            MOZ_HEADLESS: 1
            ALLOCATION_MANAGER_HOST: https://dev.moic.service.justice.gov.uk
            RAILS_ENV: test
            RACK_ENV: test
            DISABLE_COVERAGE: 1
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

  deploy:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - *configure_k8s
      - hmpps/recall_container_image
      - deploy:
          name: Deploy
          command: |
            set -x
            shopt -s nullglob
            env_name="${K8S_NAMESPACE#offender-management-}"
            sed -i -e "s/:latest/:${APP_VERSION}/" deploy/"${env_name}"/deployment.yaml deploy/"${env_name}"/domain-events-consumer.yaml* deploy/"${env_name}"/cron-*.yaml
            kubectl -n "${K8S_NAMESPACE}" annotate deployments/allocation-manager kubernetes.io/change-cause="${CIRCLE_BUILD_URL}"
            kubectl apply -f ./deploy/"${env_name}"

workflows:
  test_build_deploy:
    jobs:
#      - install_dependencies:
#          <<: *ignore_deployable_branches
#      - fetch_env_vars:
#          <<: *ignore_deployable_branches
#          context: [offender-management-shared, offender-management-staging]
#      - rubocop:
#          requires: [install_dependencies]
#      - test:
#          requires: [install_dependencies, fetch_env_vars]
#          context: [offender-management-shared, offender-management-staging]
      - hmpps/helm_lint:
          <<: *ignore_deployable_branches
          name: helm_lint
          env: staging
#      - hmpps/build_docker:
#          <<: *ignore_deployable_branches
#          <<: *verify_docker_image_config
#          requires:
#            - helm_lint
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          # filters: { branches: { only: [main] } }
          context:
            - offender-management-shared
      - hmpps/deploy_env:
          name: deploy_test
          env: test
          context:
            - hmpps-common-vars
            - offender-management-shared
            - offender-management-test
          requires:
            - build_and_push_docker_image
#      - hmpps/deploy_env:
#          name: deploy_staging
#          env: staging
#          context:
#            - hmpps-common-vars
#            - offender-management-shared
#            - offender-management-staging
#          requires:
#            - build_and_push_docker_image
#      - deploy:
#          name: deploy_staging
#          requires: [build_and_push_docker_image]
#          context: [offender-management-shared, offender-management-staging]
#      - deploy:
#          name: deploy_preprod
#          requires: [build_and_push_docker_image]
#          context: [offender-management-shared, offender-management-preprod]
#      - deploy_production_approval:
#          type: approval
#          requires: [deploy_staging]
#      - deploy:
#          name: deploy_production
#          requires: [deploy_production_approval]
#          context: [offender-management-shared, offender-management-production]

  test_env:
    jobs:
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          filters: { branches: { only: [test] } }
          context: [offender-management-shared, offender-management-test]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [test] } }
          context: [offender-management-shared, offender-management-test]

  test2_env:
    jobs:
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          filters: { branches: { only: [test2] } }
          context: [offender-management-shared, offender-management-test2]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [test2] } }
          context: [offender-management-shared, offender-management-test2]

  preprod:
    jobs:
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          filters: { branches: { only: [preprod] } }
          context: [offender-management-shared, offender-management-preprod]
      - deploy:
          requires: [build_and_push_docker_image]
          filters: { branches: { only: [preprod] } }
          context: [offender-management-shared, offender-management-preprod]

  staging:
    jobs:
      - install_dependencies:
          filters: { branches: { only: [staging] } }
      - fetch_env_vars:
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]
      - rubocop:
          requires: [install_dependencies]
          filters: { branches: { only: [staging] } }
      - test:
          requires: [install_dependencies, fetch_env_vars]
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]
      - deploy:
          requires: [build_and_push_docker_image, rubocop, test]
          filters: { branches: { only: [staging] } }
          context: [offender-management-shared, offender-management-staging]
