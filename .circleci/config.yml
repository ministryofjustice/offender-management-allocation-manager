references:
  ignore_deployable_branches: &ignore_deployable_branches
    filters: { branches: { ignore: [main, staging, preprod, test] } }

  docker_image_name: &docker_image_name
    image_name: quay.io/hmpps/offender-management

  build_and_push_docker_image_config: &build_and_push_docker_image_config
    name: build_and_push_docker_image
    persist_container_image: true
    <<: *docker_image_name

  verify_docker_image_config: &verify_docker_image_config
    name: verify_docker_image
    publish: false
    <<: *docker_image_name

  deploy_container_config: &deploy_container_config
    working_directory: ~/app
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  test_container_config: &test_container_config
    working_directory: ~/app
    resource_class: large
    docker:
      - image: cimg/ruby:3.3.4-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 4
      - image: cimg/postgres:14.4
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management_test
      - image: cimg/redis:7.0

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.4
  ruby: circleci/ruby@2.1.3
  hmpps: ministryofjustice/hmpps@9.1.0

commands:
  install_firefox:
    description: Install Firefox and Geckodriver
    steps:
      - browser-tools/install-firefox
      - browser-tools/install-geckodriver
      - run:
          name: Check install
          command: |
            firefox --version

jobs:
  noop:
    <<: *deploy_container_config
    steps:
      - run:
          name: Truthy no-op
          command: "true"

  install_dependencies:
    <<: *test_container_config
    steps:
      - checkout
      - ruby/install-deps
      - restore_cache:
          name: Restore Yarn Package Cache
          key: &yarn-cache yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install frontend modules
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: *yarn-cache
          paths:
            - .yarn/cache
            - .yarn/unplugged
      - install_firefox
      - run:
          name: Download Code Climate
          command: |
            if [ `which cc-test-reporter` ]
            then
              echo "CC test reporter cached"
            else
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/.local/bin/cc-test-reporter
              chmod +x ~/.local/bin/cc-test-reporter
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - app/vendor/bundle
            - app/node_modules
            - .local/bin
            - .bundle/config

  rubocop:
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - ruby/install-deps
      - ruby/rubocop-check

  test:
    <<: *test_container_config
    circleci_ip_ranges: true # opts the job into the IP ranges feature
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - ruby/install-deps
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            export SPEC_STATUS_PATH=~/spec_status
            bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress -- spec || \
              (echo "Flaky tests detected, trying again..." && sleep 30 && bundle exec parallel_test -t rspec -- -t ~flaky -t ~local_only --format progress --only-failures -- spec)
          environment:
            MOZ_HEADLESS: 1
            RAILS_ENV: test
            RACK_ENV: test
            DISABLE_COVERAGE: 1
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

workflows:
  test_build_deploy:
    jobs:
      - install_dependencies:
          <<: *ignore_deployable_branches
      - rubocop:
          requires: [install_dependencies]
      - test:
          requires: [install_dependencies]
      - hmpps/helm_lint:
          name: helm_lint
          env: staging
      - hmpps/build_docker:
          <<: *ignore_deployable_branches
          <<: *verify_docker_image_config
          requires:
            - helm_lint
      - hmpps/build_docker:
          <<: *build_and_push_docker_image_config
          filters: { branches: { only: [ main, test, staging, preprod ] } }
          requires:
            - helm_lint
      - hmpps/deploy_env:
          name: deploy_test
          env: test
          filters: { branches: { only: [ test ] } }
          context:
            - hmpps-common-vars # needed to fetch the ip-allowlist-groups
            - offender-management-test
          requires:
            - build_and_push_docker_image
      - hmpps/deploy_env:
          name: deploy_staging
          env: staging
          filters: { branches: { only: [ main, staging ] } }
          context:
            - hmpps-common-vars # needed to fetch the ip-allowlist-groups
          requires:
            - build_and_push_docker_image
      - hmpps/deploy_env:
          name: deploy_preprod
          env: preprod
          filters: { branches: { only: [ main, preprod ] } }
          context:
            - hmpps-common-vars # needed to fetch the ip-allowlist-groups
            - offender-management-preprod
          requires:
            - build_and_push_docker_image
      - deploy_production_approval:
          type: approval
          filters: { branches: { only: [ main ] } }
          requires:
            - deploy_staging
      - hmpps/deploy_env:
          name: deploy_production
          env: production
          context:
            - hmpps-common-vars # needed to fetch the ip-allowlist-groups, and slack notification
            - offender-management-production
          requires:
            - deploy_production_approval
          slack_notification: true
          slack_channel_name: the_elephants_devs
